(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



$VenvRoot::usage="The base location to look for venvs";
VenvNew::usage="Makes a new virtual environment";
VenvDir::usage="Provides the virtual environment directory";


Begin["`Private`"];


Options[PySessionRun]=
	{
		TimeConstraint->Automatic,
		"PollTime"->Automatic,
		Monitor->False
		};
PySessionRun[name_?(PySessionType[#]==="PythonInterpreter"&),
 s:_String|_List,
 ops:OptionsPattern[]
 ]:=
 PySessionRunPython[name,s,ops];
PySessionRun[name_?(PySessionType[#]==="SystemShell"&),
 s:_String|_List,
 ops:OptionsPattern[]
 ]:=
 PySessionRunShell[name,s,ops]


Options[PySessionRunPython]=
 Options[PySessionRun];
PySessionRunPython[name_,
 s:_String|_List,ops:OptionsPattern[]]:=
	Catch@
	Block[{
		poll=
			Replace[OptionValue["PollTime"],
				Except[_?NumericQ]->.01
				],
		reads,
		startflag=CreateUUID["process-start-"],
		doneflag=CreateUUID["process-"],
		mon = TrueQ[OptionValue[Monitor]]
		},
		Function[
			Null,
			If[mon,
				Monitor[#,
			  	Internal`LoadingPanel@
			  		Grid[
				  		KeyValueMap[
								{#,
									If[#==="StandardError",
										Function[
											StringDelete[#,
												Repeated[">>>"~~" "|""]|
												Repeated["..."~~" "|""]
												]
											],
										Identity
										]@
									StringTrim[
										First@StringSplit[
											Last@StringSplit[#2,startflag,2],
											doneflag,
											2
											],
										("\n"~~EndOfString)|
											startflag|
											doneflag
										]
								 }&,
								reads
								],
							Alignment->{Left,Top}
							]
					],
			 #
			 ],
			HoldAllComplete
			]@
		Quiet@WriteLine[PySessionProcess@name,
			StringRiffle[
				{
					"import sys",
					"from __future__ import print_function",
					"print('"<>startflag<>"')",
					"print('"<>startflag<>"', file=sys.stderr)",
					"#-----Start Block------\n",
					s,
					"\n#-----End Block------",
					"print('"<>doneflag<>"', file=sys.stderr)",
					"print('"<>doneflag<>"')"
					},
				"\n"
				]
			];
		Pause[poll];
		reads=Replace[PySessionRead[name],$Failed:>Throw[$Failed]];
		TimeConstrained[
			While[!StringContainsQ[StringRiffle[Values[reads]],doneflag],
				Pause[poll/10];
				reads=
					Merge[{
						reads,
						Replace[PySessionRead[name],$Failed:>Throw[$Failed]]
						},
						StringJoin]
				],
			Replace[OptionValue[TimeConstraint],
				Except[_?NumericQ]->1
				],
			reads=
				Merge[{
					reads,
					Replace[PySessionRead[name],$Failed:>Throw[$Failed]]
					},
					StringJoin]
			];
		KeyValueMap[
			#->
				If[#==="StandardError",
					Function[
						StringDelete[#,
							Repeated[">>>"~~" "|""]|
							Repeated["..."~~" "|""]
							]
						],
					Identity
					]@
					StringTrim[
						First@StringSplit[
							Last@StringSplit[#2,startflag,2],
							doneflag,
							2
							],
					("\n"~~EndOfString)|
						startflag|
						doneflag
					]&,
			reads
			]//Association
		];


Options[PySessionRunShell]=
 Options[PySessionRun];
PySessionRunShell[name_,
 s:_String|_List,
 ops:OptionsPattern[]
 ]:=
	Catch@
	Block[{
		poll=
			Replace[OptionValue["PollTime"],
				Except[_?NumericQ]->.01
				],
		reads,
		startflag=CreateUUID["process-start-"],
		doneflag=CreateUUID["process-"],
		mon = TrueQ[OptionValue[Monitor]]
		},
		Function[
			Null,
			If[mon,
				Monitor[#,
			  	Internal`LoadingPanel@
			  		Grid[
				  		KeyValueMap[
								{#,
									StringTrim[
										First@StringSplit[
											Last@StringSplit[#2,startflag,2],
											doneflag,
											2
											],
										("\n"~~EndOfString)|
											startflag|
											doneflag
										]
								 }&,
								reads
								],
							Alignment->{Left,Top}
							]
					],
			 #
			 ],
			HoldAllComplete
			]@
		Quiet@WriteLine[PySessionProcess@name,
			StringRiffle[
				{
				 "echo \""<>startflag<>"\"",
				 ">&2 echo \""<>startflag<>"\"",
				 s,
				 ">&2 echo \""<>doneflag<>"\"",
				 "echo \""<>doneflag<>"\""
				 },
				"\n"
				]
			];
		Pause[poll];
		reads=Replace[PySessionRead[name],$Failed:>Throw[$Failed]];
		TimeConstrained[
			While[!StringContainsQ[StringRiffle[Values[reads]],doneflag],
				Pause[poll/10];
				reads=
					Merge[{
						reads,
						Replace[PySessionRead[name],$Failed:>Throw[$Failed]]
						},
						StringJoin]
				],
			Replace[OptionValue[TimeConstraint],
				Except[_?NumericQ]->1
				],
			reads=
				Merge[{
					reads,
					Replace[PySessionRead[name],$Failed:>Throw[$Failed]]
					},
					StringJoin]
			];
		KeyValueMap[
			#->
				StringTrim[
					First@StringSplit[
						Last@StringSplit[#2,startflag,2],
						doneflag,
						2
						],
				("\n"~~EndOfString)|
					startflag|
					doneflag
				]&,
			reads
			]//Association
		];


$VenvRoot=
	If[DirectoryQ@"~/Documents/Python/config",
		"~/Documents/Python/config",
		FileNameJoin@{$HomeDirectory,"virtualenvs"}
		];


Options[VenvNew]=
	{
		"Version"->None
		};
VenvNew[
	name_String?(DirectoryQ@*DirectoryName),
	ops:OptionsPattern[]
	]:=
	(
		SetDirectory[name];
		(ResetDirectory[];#)&@
			RunProcess[{
				"virtualenv",
				FileBaseName@name
				}]
		);
VenvNew[name_String?(StringMatchQ[Except[$PathnameSeparator]..])]:=
	(
		If[!DirectoryQ[$VenvRoot],
			CreateDirectory[$VenvRoot]
			];
		VenvNew[FileNameJoin@{$VenvRoot,name}]
		)


VenvDir[dir_String?VenvDirQ]:=
 dir;
VenvDir[name_String?(Not@*VenvDirQ)]:=
 (
	If[!DirectoryQ[$VenvRoot],
		CreateDirectory[$VenvRoot]
		];
	If[DirectoryQ@FileNameJoin@{$VenvRoot,name},
	  FileNameJoin@{$VenvRoot,name},
	  $Failed
	 ]
	)
VenvDirQ[_]:=$Failed


VenvDirQ[dir_String?DirectoryQ]:=
	FileExistsQ[FileNameJoin@{dir,"bin","activate"}];
VenvDirQ[_]:=False;


End[];



